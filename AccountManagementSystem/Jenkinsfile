pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = 'accountmanagementsystem'
        DOCKER_TAG = "${env.BUILD_NUMBER}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out code from GitLab...'
                checkout scm
            }
        }
        
        stage('Build .NET Application') {
            steps {
                echo 'Building .NET application...'
                dir('AccountManagementSystem') {
                    sh 'dotnet restore'
                    sh 'dotnet build --configuration Release --no-restore'
                    sh 'dotnet publish --configuration Release --output ./publish --no-restore'
                }
            }
        }
        
        stage('Run Unit Tests') {
            steps {
                echo 'Running unit tests...'
                dir('AccountManagementSystem') {
                    sh 'dotnet test --configuration Release --no-build --verbosity normal'
                }
            }
            post {
                always {
                    echo 'Unit tests completed'
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                echo 'Building Docker image...'
                dir('AccountManagementSystem') {
                    sh 'docker build -f Dockerfile.simple -t ${DOCKER_IMAGE}:${DOCKER_TAG} .'
                }
            }
        }
        
        stage('Run Integration Tests') {
            steps {
                echo 'Running integration tests with Docker...'
                dir('AccountManagementSystem') {
                    sh 'docker-compose -f docker-compose.test.yml up --build --abort-on-container-exit --exit-code-from test-runner'
                }
            }
            post {
                always {
                    echo 'Cleaning up test containers...'
                    dir('AccountManagementSystem') {
                        sh 'docker-compose -f docker-compose.test.yml down'
                    }
                }
            }
        }
        
        stage('Create Artifacts') {
            steps {
                echo 'Creating deployment artifacts...'
                dir('AccountManagementSystem') {
                    sh 'tar -czf ../artifacts-${BUILD_NUMBER}.tar.gz publish/'
                    sh 'docker save ${DOCKER_IMAGE}:${DOCKER_TAG} | gzip > ../docker-image-${BUILD_NUMBER}.tar.gz'
                }
                archiveArtifacts artifacts: '*.tar.gz', fingerprint: true
            }
        }
        
        stage('Notify Success') {
            when {
                anyOf {
                    branch 'main'
                    branch 'master'
                }
            }
            steps {
                echo 'Build successful! Ready for deployment to Octopus Deploy.'
                // Here you would trigger Octopus Deploy
                // octopusDeployPush packagePaths: 'artifacts-*.tar.gz', serverId: 'octopus-server'
            }
        }
    }
    
    post {
        always {
            echo 'Cleaning up workspace...'
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed! Check the logs for details.'
        }
    }
}
